全局配置
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
显示颜色
git config --global color.ui true
初始化一个Git仓库
git init 

添加文件到Git仓库
git add <file>   注意，可以反复多次使用，添加多个文件      把文件修改添加到暂存区
git commit -m <message>                                                把暂存区的所有内容提交到当前分支

查看工作区状态
git status
查看修改内容
git diff
查看文件内容
cat <file>

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令
git reset --hard commit_id 
查看提交历史
git log 
查看命令历史
git reflog 

查看工作区和版本库里面最新版本的区别
git diff HEAD -- readme.txt

丢弃工作区的修改
git checkout -- file
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。

git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

把暂存区的修改撤销掉（unstage），重新放回工作区
git reset HEAD <file>
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
git checkout -- readme.txt  丢弃工作区的修改

删除工作区文件
rm <file>
从版本库(缓存区)中删除该文件
git rm <file>

关联一个远程库，远程库的名字就是origin
git remote add origin git@github.com:michaelliao/learngit.git
本地库的所有内容推送到远程库
git push -u origin master
第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
从现在起，只要本地作了提交，就可以通过命令
git push origin master            推送最新修改；

查看远程库信息
git remote -v
删除远程库
git remote rm <name>
此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库

从远程库克隆
git clone https://github.com/einstein271828/gitskills.git

HEAD指向的就是当前分支
查看分支
git branch
创建分支
git branch <name>
切换分支
git checkout <name>或者git switch <name>
创建+切换分支
git checkout -b <name>或者git switch -c <name>
合并某分支到当前分支
git merge <name>
删除分支
git branch -d <name>
查看到分支合并图
git log --graph
git log --graph --pretty=oneline --abbrev-commit

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并
git merge --no-ff -m "merge with no-ff" dev

工作现场“储藏”
git stash
查看“储藏”
git stash list
现场恢复，但是恢复后，stash内容并不删除
git stash apply 
git stash apply stash@{0}  
删除“储藏”
git stash drop
恢复的同时把stash内容也删了
git stash pop

强行删除一个没有被合并过的分支
git branch -D <name>

在本地创建和远程分支对应的分支
git checkout -b branch-name origin/branch-name
建立本地分支和远程分支的关联
git branch --set-upstream branch-name origin/branch-name
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突并在本地提交

创建标签
git tag v1.0
查看所有标签
git tag
历史提交的commit id打标签
git tag v0.9 f52c633
删除标签
git tag -d v0.1
推送某个标签到远程
git push origin v1.0
一次性推送全部尚未推送到远程的本地标签
git push origin --tags
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
git tag -d v0.9
然后，从远程删除。删除命令也是push，但是格式如下：
git push origin :refs/tags/v0.9


Bash基本操作命令
cd   	改变目录
cd .. 	回退到上一个目录，直接cd进入默认目录
pwd	显示当前所在的目录路径
ls(ll)	都是列出当前目录中的所有文件，只不过ll（两个ll）列出的内容更为详细
touch	新建一个文件 如touch index.js就会在当前目录下新建一个index.js文件
rm 	删除一个文件，rm index,js就会把index.js文件删除
mkdir	新建一个目录，就是新建一个文件夹
rm -r 	删除一个文件夹，rm -r src删除src 目录，好像不能用通配符
mv	移动文件，mv index.html src index.html 是我们要移动的文件，src 是目标文件夹，当然，这样写，必须保证文件和目标文件夹在同一目录下
reset	重新初始化终端/清屏
clear	清屏
history	查看命令历史
help	帮助
exit	退出
#表示注释
		













